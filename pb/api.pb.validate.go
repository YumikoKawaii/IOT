// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// RegisterRequestValidationError is the validation error returned by
// RegisterRequest.Validate if the designated constraints aren't met.
type RegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestValidationError) ErrorName() string { return "RegisterRequestValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestValidationError{}

// Validate checks the field values on RegisterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RegisterResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Token

	return nil
}

// RegisterResponseValidationError is the validation error returned by
// RegisterResponse.Validate if the designated constraints aren't met.
type RegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseValidationError) ErrorName() string { return "RegisterResponseValidationError" }

// Error satisfies the builtin error interface
func (e RegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoginResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Token

	return nil
}

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on ControlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ControlRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeviceId

	// no validation rules for ControlData

	return nil
}

// ControlRequestValidationError is the validation error returned by
// ControlRequest.Validate if the designated constraints aren't met.
type ControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlRequestValidationError) ErrorName() string { return "ControlRequestValidationError" }

// Error satisfies the builtin error interface
func (e ControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlRequestValidationError{}

// Validate checks the field values on ControlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ControlResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ControlResponseValidationError is the validation error returned by
// ControlResponse.Validate if the designated constraints aren't met.
type ControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlResponseValidationError) ErrorName() string { return "ControlResponseValidationError" }

// Error satisfies the builtin error interface
func (e ControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlResponseValidationError{}

// Validate checks the field values on GetDevicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDevicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDevicesRequestValidationError is the validation error returned by
// GetDevicesRequest.Validate if the designated constraints aren't met.
type GetDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicesRequestValidationError) ErrorName() string {
	return "GetDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicesRequestValidationError{}

// Validate checks the field values on GetDevicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDevicesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDevicesResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetDevicesResponseValidationError is the validation error returned by
// GetDevicesResponse.Validate if the designated constraints aren't met.
type GetDevicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicesResponseValidationError) ErrorName() string {
	return "GetDevicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicesResponseValidationError{}

// Validate checks the field values on UpsertDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertDeviceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Code

	return nil
}

// UpsertDeviceRequestValidationError is the validation error returned by
// UpsertDeviceRequest.Validate if the designated constraints aren't met.
type UpsertDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDeviceRequestValidationError) ErrorName() string {
	return "UpsertDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDeviceRequestValidationError{}

// Validate checks the field values on UpsertDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertDeviceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UpsertDeviceResponseValidationError is the validation error returned by
// UpsertDeviceResponse.Validate if the designated constraints aren't met.
type UpsertDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertDeviceResponseValidationError) ErrorName() string {
	return "UpsertDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertDeviceResponseValidationError{}

// Validate checks the field values on GetDevicesResponse_Device with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDevicesResponse_Device) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Code

	return nil
}

// GetDevicesResponse_DeviceValidationError is the validation error returned by
// GetDevicesResponse_Device.Validate if the designated constraints aren't met.
type GetDevicesResponse_DeviceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicesResponse_DeviceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicesResponse_DeviceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicesResponse_DeviceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicesResponse_DeviceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicesResponse_DeviceValidationError) ErrorName() string {
	return "GetDevicesResponse_DeviceValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevicesResponse_DeviceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicesResponse_Device.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicesResponse_DeviceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicesResponse_DeviceValidationError{}
